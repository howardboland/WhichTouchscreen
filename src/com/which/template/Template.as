package com.which.template{    import com.which.template.events.TemplateEvent;    import com.which.utils.Console;        import fl.text.TLFTextField;        import flash.display.*;    import flash.errors.IOError;    import flash.events.*;    import flash.net.URLLoader;    import flash.net.URLRequest;    import flash.text.*;    public class Template extends MovieClip    {		        public var headerTLF:TLFTextField;        public var titleTLF:TLFTextField;        public var bodyTLF:TLFTextField;		public var website:String = "";		public var _imageURLs:Array;		public var button:MovieClip;		public var isLoaded:Boolean;		public var background:MovieClip;        protected var body_divider_delta:Number;        protected var body_btn_delta:Number;        protected var btn_delta:Number = 0;		protected var bitmap:Bitmap;				protected var imageIndex:int = 0;		protected var data:XML;        public function Template()        {			Console.log("HELLO", this);			init();						        }        protected function init(event:Event=null) : void        {			Console.log("Init", this)			isLoaded = false;			if (this.hasOwnProperty("btn"))				this.button = this["btn"];			if (this.hasOwnProperty("bg"))				this.background = this["bg"];			this.headerTLF = this["header"];			this.titleTLF = this["title"];			this.bodyTLF = this["body"];            this.setupButton();						try			{				Console.log( root.loaderInfo.parameters, this);				var dataURL:String = root.loaderInfo.parameters["dataURL"];				if (dataURL!=null)				{					dataURL = unescape(dataURL);					loadData( dataURL )				}			} catch (err:Error){							}			if (this.background!=null)			{				this.background.addEventListener( MouseEvent.CLICK, onBgClick);			} else {				Console.log("Background not found", this);			}			//test();        }		protected function onBgClick( e:MouseEvent ):void		{			Console.log("templateClickBg", this)			this.parent.dispatchEvent( new TemplateEvent( TemplateEvent.CLICK_BG ));		}		public function loadData( url:String ):void		{			Console.log("URL:"+url, this);			var l:URLLoader = new URLLoader();			l.addEventListener(Event.COMPLETE, onDataLoaded);			l.addEventListener(IOErrorEvent.IO_ERROR, onDataLoadError);			l.load( new URLRequest(url) )		}		protected function onDataLoaded( e:Event ) : void		{			Console.log("Success data loaded: "+e.target.data, this);			data = new XML( e.target.data );			headerText = data..header[0].text();			titleText = data..title[0].text();			bodyText = data..body[0].text();			if (data..a.length()>0)			{				buttonText 	= data..a[0].text();				website 	= data..a[0].@href;								}			var imgs:Array = [];			var imgData = data..img;			Console.log(imgData,this);						for (var i:int=0;i<imgData.length();i++)			{				imgs.push( imgData[i].@src );			}			Console.log("images:"+imgs,this);			imageURLs = imgs;		}				protected function onDataLoadError( e:IOErrorEvent ) : void 		{			Console.log("Error: "+e.text, this);				this.dispatchEvent( new TemplateEvent( TemplateEvent.ERROR ) );		}				public function setupButton() : void		{			if (this.button!=null)			{				this.btn_delta = this.button.slant.x - (this.button.txt.x + this.button.txt.textWidth);				this.button.mouseChildren = false;				this.button.mouseEnabled = this.button.buttonMode = true;				this.button.addEventListener(MouseEvent.MOUSE_OVER, this.onBtnOver);				this.button.addEventListener(MouseEvent.MOUSE_OUT, this.onBtnOut);				this.button.addEventListener(MouseEvent.CLICK, this.onAction);				this.button.slant.icon.gotoAndStop("man");			}					}				protected function onAction( e:MouseEvent=null ):void		{									Console.log("Dispatch event - display:"+website, this);			this.parent.dispatchEvent( new TemplateEvent( TemplateEvent.OPEN_URL, website ));			e.stopPropagation();		}				protected function test( e:Event = null ):void		{			headerText 	= "Which? Lorem Ipsum"           	titleText 	= "Lorem ipsum dolor sit amet, consectetur adipiscing elit. ";			bodyText 	= "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse sed felis ligula. Morbi id arcu id dui porta tristique eu et velit. Duis purus nisi, tempor ut lacus vitae, facilisis eleifend metus. Donec pretium libero eget dignissim porttitor. Integer quis ante vehicula, volutpat quam at, eleifend urna. Morbi ac lectus et sem sodales pellentesque. Sed at tortor nec magna egestas volutpat a sit amet dolor. Quisque odio lectus, malesuada et odio quis, varius vehicula massa. Phasellus a porttitor lacus, ac pretium tortor. Aliquam ac ultrices lectus. Donec volutpat lectus sed orci placerat posuere.";			buttonText 	= "Which? Lorem Ipsum";			website 	= "http://which.co.uk";			imageURLs 	= ["../userdata/random.jpg"];		}				protected function onBtnOver(e:MouseEvent) : void		{			e.target.alpha = 0.8;		}				protected function onBtnOut(e:MouseEvent) : void		{			e.target.alpha = 1;		}		        public function set titleText(s:String) : void        {            this.titleTLF.text = s.toUpperCase();            this.titleTLF.autoSize = TextFieldAutoSize.LEFT;        		}        public function get titleText() : String        {            return this.titleTLF.text;        }        public function set headerText(s:String) : void        {            this.headerTLF.text = s.toUpperCase();            this.headerTLF.autoSize = TextFieldAutoSize.LEFT;        }        public function get headerText() : String        {            return this.headerTLF.text;        }        public function set bodyText(s:String) : void        {            if (isNaN(this.body_divider_delta))            {                this.body_divider_delta =  this.bodyTLF.y + this.bodyTLF.textHeight;            }            if (isNaN(this.body_btn_delta))            {				if (this.button!=null)                this.body_btn_delta =  this.button.y;            }            this.bodyTLF.text = s;//.toUpperCase();            this.bodyTLF.autoSize = TextFieldAutoSize.LEFT;                   }        public function get bodyText() : String        {            return this.bodyTLF.text;        }        public function set buttonText(s:String) : void        {			if (this.button!=null)			{				var tf:TLFTextField = this.button.txt;				tf.text = s;				tf.autoSize = TextFieldAutoSize.LEFT;				this.button.slant.x = this.btn_delta + (tf.x + tf.textWidth);	            this.button.bg.width = this.button.slant.x + this.button.slant.width;			}        }        public function get buttonText() : String        {            return (this.button!=null) ? this.button.txt.text : null;        }		public function set imageURLs(urls:Array) : void        {			if (_imageURLs!=urls)			{				imageIndex = 0				loadImage( urls );			} 			_imageURLs = urls;        }		public function get imageURLs() : Array        {            return _imageURLs;        }				protected function loadImage( urls:Array ):void		{			Console.log("imageIndex:"+imageIndex,this);			if (imageIndex<urls.length)			{				var l:Loader = new Loader();				l.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoaded );				l.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, imageError );				l.load(  new URLRequest( urls[imageIndex] )  );			} else {				isLoaded = true;				this.parent.dispatchEvent( new TemplateEvent( TemplateEvent.LOADED ) );				Console.log("isLoaded:"+isLoaded,this);			}		}				protected function imageLoaded( e:Event ):void		{			if (this.getChildByName("imageHolder"+(imageIndex+1))!=null)			{				var imageHolder:MovieClip = this["imageHolder"+(imageIndex+1)];				bitmap = Bitmap(e.target.loader.content);	            bitmap.smoothing = true;				imageHolder.img.bg.visible = false;				var scaleFactor:Number = Math.min(imageHolder.img.bg.width/bitmap.width, imageHolder.img.bg.height/bitmap.height); 				bitmap.scaleX = bitmap.scaleY = scaleFactor;							imageHolder.img.addChild(bitmap);							}			imageIndex++;			loadImage( this.imageURLs)		}				protected function imageError( e:IOErrorEvent ):void		{			Console.log(e.text, this);			this.parent.dispatchEvent( new TemplateEvent( TemplateEvent.ERROR ) );		}		    }}